# Rubinius WebAssembly VM
# Copyright (c) 2019, Laurent Julliard and contributors
# All rights reserved.
#
# Turns an RLang source file into a Wasm text
# code file (WAT)
require_relative '../../utils/log'
require_relative '../ext/tempfile'
require_relative '../../rlang/parser'

module Builder::Rlang
  class Compiler
    include Log

    attr_reader :target

    # WAT source frame
    WAT_FRAME = %q{
;; Generated by Rlang compiler version %{version} on %{time}\n"
(module %{module}
  (memory $0 %{memory_min} %{memory_max})
  (export "memory" (memory $0))

%{code}
)
    }

    # source: Path to Rlang file (.rb)
    # target: Path to Wat file (.wat)
    # options: Rlang parser options (parser.config)
    def initialize(source, target, options={})
      @source = source # Path to Rlang file (.rb)
      @target = target # Path to Wat file (.wat)
      @options = options # Rlang parser options (parser.config)
      @temp_target = target.nil?
      # Initialize parser and WAT code generator
      @parser = Rlang::Parser::Parser.new(nil, @options)
      @wgenerator = Rlang::Parser::WGenerator.new(@parser)
      @parser.wgenerator = @wgenerator
    end

    # return true if everything went well, false otherwise
    def compile
      @parser.parse_file(@source)
      # Write generated WAT code in a temp file if
      # target file not given
      # Do not delete temp file when closing
      if @target
        @tf = File.open(@target, 'r')
      else
        @tf = Tempfile.new([File.basename(@source), '.wat'])
        @tf.persist!
        @target = @tf.path
      end
      @tf.write(WAT_FRAME % {version: Rlang::VERSION,
                          time: Time.now,
                          module: @options[:module], 
                          memory_min: @options[:memory_min],
                          memory_max: @options[:memory_max],
                          code: @wgenerator.root.transpile
                        })
      @tf.close
      true
    end

    def cleanup
      File.unlink(@tf.path) if @temp_target
    end
  end
end
