#!/usr/bin/env ruby
# Rubinius WebAssembly VM
# Copyright (c) 2019-2020, Laurent Julliard and contributors
# All rights reserved.
#
# Rlang compiler
# Rlang is a subset of the Ruby language that can be transpiled
# to WAT and then compiled to WASM. The Rubinius WASM virtual
# machine is written in Rlang.
#
# Compile a Rlang source file to WAT file


require 'optparse'
require 'fileutils'
require 'rlang'
require 'builder'

include Log
logger.level = Logger::INFO

options = {}
OptionParser.new do |opts|
  opts.banner = %q{Usage: rlang [options] filename
  read a Rlang file, check it for errors, and convert it
  to either Ruby AST, WAT source code or WASM bytecode

examples:
  # Parse Rlang file and display the Ruby abstract syntax tree
  rlang --ast test.rb

  # Parse Rlang file and generate WAT code in test.wat file
  rlang --wat -o /tmp/test.wat test.rb

  # Parse Rlang file and generate WASM bytecodein test.wasm file
  rlang --wasm -o /tmp/test.wasm test.rb

options:
}

  opts.on("-I DIR", "--load_path DIRECTORY", "specify $LOAD_PATH directory (may be used more than once)") do |dir|
    options[:LOAD_PATH] ||= []
    options[:LOAD_PATH] << dir
  end

  opts.on("-M", "--module NAME", "WASM module name") do |name|
    options[:module] = name
  end

  opts.on("-x", "--export-all", "Export all Web Assembly functions") do |v|
    options[:export_all] = true
  end

  opts.on("-m", "--memory MIN[,MAX]", "WASM Memory size allocated in pages (MIN default is 4)") do |sizes|
    options[:memory_min], options[:memory_max] = sizes.split(',')
  end

  opts.on("-w", "--wat", "Generate WAT source file") do |v|
    options[:wat] = v
  end

  opts.on("-a", "--ast", "Generate Ruby AST file") do |v|
    options[:ast] = v
  end

  opts.on("-s", "--wasm", "Generate WASM bytecode file") do |v|
    options[:wasm] = v
  end

  opts.on("-S", "--start FUNCTION", "Function name where execution starts (default '_start')") do |function|
    options[:start] = function
  end

  opts.on("-o", "--output FILE", "Write output to file") do |file|
    options[:output] = file
  end

  opts.on("-v", "--verbose [LEVEL]", "Verbosity level (fatal, error, warn, info, debug)") do |level|
    options[:log_level] = level || 'INFO'
    logger.level = Kernel.const_get("Logger::#{options[:log_level].upcase}")
  end

  opts.on("-V", "--version", "Displays Rlang version") do |v|
    puts Rlang::VERSION
    exit
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end.parse!(ARGV)

options[:module]     ||= '' 
options[:memory_min] ||= 4
options[:LOAD_PATH]  ||= []
options[:start]      ||= '_start'

fh_out = options[:output] ? File.open(options[:output], 'w') : STDOUT

logger.formatter = proc do |severity, datetime, progname, msg|
  loc = caller_locations[3] # skip over the logger call itself
  "#{severity[0]}: #{File.basename(loc.path)}:#{loc.lineno}##{loc.label} > #{msg}\n"
end

if options[:ast]
  fh_in = ARGV.empty? ? STDIN : File.open(ARGV[0])
  fh_out.write(Parser::CurrentRuby.parse(File.read(fh_in)))
end

if options[:wat] || options[:wasm]
  # Compile the Rlang file into a WAT file
  source = File.expand_path(ARGV[0])
  compiler = Builder::Rlang::Compiler.new(source, nil, options)
  if compiler.compile
    wat_path = compiler.target
  else
    exit 1
  end
  # Compile the WAt file to Wasm byte code
  if options[:wasm]
    builder = Builder::Wat::Builder.new(wat_path, options[:output])
    builder.compile
  elsif options[:wat]
    if options[:output]
      FileUtils.mv(wat_path, options[:output])
    else
      STDOUT.write(File.read(wat_path))
    end
  end
end

exit 0

